// file: ./prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
  // Make sure the `relationMode = "prisma"` line is REMOVED.
}

// --- Application-Specific Models ---
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)

  // Auth.js relations
  accounts Account[]
  sessions Session[]

  // App-specific relations
  transcriptionJobs TranscriptionJob[]
}

model TranscriptionJob {
  id             String    @id @default(cuid())
  status         JobStatus @default(PENDING)
  sourceFileName String
  sourceFileSize Int
  sourceFileHash String?
  fileUrl        String

  // Results
  transcriptText String? @db.Text
  transcriptSrt  String? @db.Text
  transcriptVtt  String? @db.Text
  displayTitle   String? @db.Text

  // Metadata
  engineUsed   String  @default("groq")
  language     String?
  duration     Float?
  errorMessage String? @db.Text

  // Lifecycle Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  startedAt   DateTime?
  completedAt DateTime?

  // Relation to User
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId])
  @@map("transcription_jobs")
}

// --- Enums ---
enum Role {
  USER
  ADMIN
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

// --- Auth.js Models ---
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
